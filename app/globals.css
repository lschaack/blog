@import "tailwindcss";

@theme {
  /* NOTE:
   * These are overridden by the variables provided by Next in the root layout
   * BUT if I don't include them here, Tailwind doesn't seem to recognize them
   * AND if I try to use tailwind.config.ts, same thing - unrecognized class
   *
   * Not sure what the issue is, but letting these get overridden works well enough for now
   */
  --font-geist-mono: "Geist Mono", monospace;
  --font-lato: "Lato", sans-serif;

  --color-mesa-sky: #b2d3f3;
  --color-mesa-shadow: #1f2238;

  --color-night-owl-background: #011627;
  --color-night-owl-background-dark: #010a15;
  --color-night-owl-text: #d0d9e8;
  --color-night-owl-title: #dcdcaa;
  --color-night-owl-literal: #ff5874;
  --color-night-owl-built-in: #addb67;
  --color-night-owl-keyword: #c087e7;
  --color-night-owl-attr: #7fdbca;

  --color-deep-950: #01060A;
  --color-deep-900: #01080F;
  --color-deep-800: #011627;
  --color-deep-700: #132534;
  --color-deep-600: #394C60;
  --color-deep-500: #657E95;
  --color-deep-400: #A4B8CB;
  --color-deep-300: #D0DCE7;
  --color-deep-200: #E1E9F0;
  --color-deep-100: #F2F5F8;
  --color-deep-50: #FBFCFD;

  --color-virginia-sky-950: #020509;
  --color-virginia-sky-900: #070E1B;
  --color-virginia-sky-800: #11223F;
  --color-virginia-sky-700: #1B3663;
  --color-virginia-sky-600: #254A87;
  --color-virginia-sky-500: #2F5FAB;
  --color-virginia-sky-400: #4A7DCD;
  --color-virginia-sky-300: #7A9FDA;
  --color-virginia-sky-200: #AAC2E8;
  --color-virginia-sky-100: #DAE4F5;
  --color-virginia-sky-50: #F2F6FB;

  --color-saguaro-800: #1A270C;
  --color-saguaro-700: #2C4214;
  --color-saguaro-600: #466D1C;
  --color-saguaro-500: #588B23;
  --color-saguaro-400: #80B04A;
  --color-saguaro-300: #A1DA62;
  --color-saguaro-200: #B9E387;
  --color-saguaro-100: #E7F9D2;
  --color-saguaro-50: #F5FDED;

  --color-prickly-pear-800: #250E1A;
  --color-prickly-pear-700: #41102A;
  --color-prickly-pear-600: #77224E;
  --color-prickly-pear-500: #A32968;
  --color-prickly-pear-400: #BD327B;
  --color-prickly-pear-300: #F075B5;
  --color-prickly-pear-200: #FCC5E2;
  --color-prickly-pear-100: #FEF1F8;
  --color-prickly-pear-50: #FFFAFD;

  /* switchable theme colors */
  --color-bold: var(--color-deep-800);
  --color-semibold: var(--color-deep-600);
  --color-medium: var(--color-deep-500);
  --color-normal: var(--color-deep-300);
  --color-semilight: var(--color-deep-200);
  --color-light: var(--color-deep-100);
  --color-extralight: var(--color-deep-50);

  --color-text-dark: var(--color-deep-800);
  --color-text-semilight: var(--color-deep-600);
  --color-text-light: var(--color-deep-500);
  --color-text-extralight: var(--color-deep-100);
  --color-highlight: var(--color-deep-200);

  --color-surface: var(--color-slate-50);
  /* TODO: probably makes more sense to just do transparency inline unless it's configurable */
  --color-surface-translucent: --alpha(var(--color-deep-50) / 90%);

  /* animations */
  --animate-twist: twist 1.4s ease normal;
  --animate-quicktwist: quicktwist 1s ease normal;
  --animate-draw: draw 1s linear forwards;

  @keyframes twist {
    20% {
      transform: rotateX(8deg) rotateY(-40deg);
    }

    60% {
      animation-timing-function: ease-in;
      transform: rotateX(8deg) rotateY(374deg);
    }

    78% {
      transform: rotateX(8deg) rotateY(340deg);
    }

    92% {
      animation-timing-function: ease-in;
      transform: rotateX(8deg) rotateY(344deg);
    }

    96% {
      transform: rotateX(8deg) rotateY(340deg);
    }

    98% {
      animation-timing-function: ease-in;
      transform: rotateX(8deg) rotateY(342deg);
    }

    100% {
      transform: rotateX(8deg) rotateY(340deg);
    }
  }


  @keyframes quicktwist {
    60% {
      animation-timing-function: ease-in;
      transform: rotateX(8deg) rotateY(374deg);
    }

    78% {
      animation-timing-function: ease-out;
      transform: rotateX(8deg) rotateY(340deg);
    }

    92% {
      animation-timing-function: ease-in;
      transform: rotateX(8deg) rotateY(344deg);
    }

    96% {
      transform: rotateX(8deg) rotateY(340deg);
    }

    98% {
      animation-timing-function: ease-in;
      transform: rotateX(8deg) rotateY(342deg);
    }

    100% {
      transform: rotateX(8deg) rotateY(340deg);
    }
  }

  @keyframes draw {
    to {
      stroke-dashoffset: 0;
    }
  }
}

@layer components {

  .pop-hover,
  .pop-focus,
  .pop-focus-within,
  .pop-focus-visible,
  .pop-focus-visible-within,
  .pop-active {
    transition: scale 0.2s ease, filter 0.2s ease;
  }

  .pop-hover:not(:disabled):hover,
  .pop-focus:not(:disabled):focus,
  .pop-focus-within:not(:disabled):focus-within,
  .pop-focus-visible:not(:disabled):focus-visible,
  .pop-focus-visible-within:not(:disabled):has(:focus-visible),
  .pop-active:not(:disabled):active {
    /* Scale needs to be the reciprocal of a power of 2 (e.g. 1/16 = 6.25%)
     * to avoid sub-pixel issues with the absolutely-positioned filled track
     * since root rem is the default 16px */
    scale: 1.0625;
    filter: brightness(105%);
    outline: 0;
  }

  .icon-surface {
    border-radius: 100%;
    padding: 0.5rem;
  }

  .card {
    padding: 1rem;
    background-color: var(--color-deep-50);
    border-radius: 0.75rem;
  }

  .single-row {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .menu-option {
    padding: 0.5rem;
    transition-property: background-color;
    transition-timing-function: var(--default-transition-timing-function);
    transition-duration: 200ms;

    &:focus-within,
    &:hover {
      background-color: var(--color-deep-200);
      outline: none;
    }
  }
}
